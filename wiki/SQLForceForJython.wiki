#labels Featured

= SQLForce.py -- a Jython module for SQLForce =

The SQLForce.py module brings ANSI INSERT, UPDATE, DELETE, SELECT, SELECT UNION, and SELECT DISTINCT for Salesforce into Jython. SQLForce.py is built on the core SQLForce project. We use it everyday.

Getting started is easy.:
  * Download the most recent sqlforce.zip distribution.
  * Add sqlforce.jar to your java CLASSPATH
  * Import the SQLForce module

= Connecting to Salesforce =
There are two ways to connect to Salesforce using jython. You can connect using complete
credential information:
{{{
import SQLForce

session = SQLForce.Session()
session.connect( "PRODUCTION", "gsmithfarmer@mail.com", "***", "securityToken" )
}}}
or you can connect using a registered profile.
{{{
import SQLForce

session = SQLForce.Session("profileName")
}}}
See the SalesforceConnectionProfileRegistry page for instructions on setting up connection profiles.

= Example: Select Rows =

{{{
import SQLForce

session = SQLForce.Session()
session.connect( "PRODUCTION", "gsmithfarmer@mail.com", "***", "securityToken" )

## Return one array per row
for c in session.select("SELECT LastName, FirstName, MailingCountry FROM Contact"):
    print "Last Name:", c[0], "First Name: ", c[1]

## Return one python object per row
for rec in session.selectRecords("SELECT LastName, FirstName, MailingCountry FROM Contact"):
   print rec.LastName, rec.FirstName, rec.MailingCountry
}}}

= Example: Selects Rows with a Callback =
{{{
def callback(s):
    print s
session.select2( "SELECT count() FROM Contact", callback )
}}}

= Example: Update Records =
{{{
session.runCommands("UPDATE Contact SET title='CEO' WHERE LastName='Smith'")
}}}